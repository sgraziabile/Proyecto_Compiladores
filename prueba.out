.CODE 
PUSH simple_heap_init ; Carga direccion de rutina para inicializar el heap
CALL ; Llama a la rutina
PUSH lblMetmain@Init
CALL
HALT

simple_heap_init: RET 0	; Retorna inmediatamente 

simple_malloc: LOADFP	; Inicialización unidad
LOADSP 
STOREFP ; Finaliza inicialización del RA
LOADHL	; hl
DUP
PUSH 1	; 1
ADD	; hl+1
STORE 4 ; Guarda el resultado (un puntero a la primer celda de la región de memoria)
LOAD 3	; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo)
ADD
STOREHL ; Mueve el heap limit (hl). Expande el heap
STOREFP
RET 1	; Retorna eliminando el parámetro

.DATA
lblVTObject: NOP


.CODE
lblConstructor@Object:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
FMEM 0 ; Libera espacio de variables locales
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de Object

lblMetdebugPrint@Object:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
LOAD 3    ; Apila el parametro
IPRINT    ; Imprime el entero en el tope de la pila
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de debugPrint


.DATA
lblVTSystem: NOP


.CODE
lblConstructor@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
FMEM 0 ; Libera espacio de variables locales
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de System

lblMetread@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
READ ; Lee el proximo byte del stream 
STORE 3 ; Guarda el valor de retorno 
STOREFP ; Almacena el tope de la pila en el registro 
RET 0 ; Libera el espacio de los parametros de read

lblMetprintB@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
LOAD 3    ; Apila el parametro
BPRINT    ; Imprime el entero en el tope de la pila
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de printB

lblMetprintC@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
LOAD 3    ; Apila el parametro
CPRINT    ; Imprime el caracter en el tope de la pila
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de printC

lblMetprintI@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
LOAD 3    ; Apila el parametro
IPRINT    ; Imprime el entero en el tope de la pila
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de printI

lblMetprintS@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
LOAD 3    ; Apila el parametro
SPRINT    ; Imprime el string en el tope de la pila
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de printS

lblMetprintln@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
PRNLN    ; Imprime un salto de linea
STOREFP ; Almacena el tope de la pila en el registro 
RET 0 ; Libera el espacio de los parametros de println

lblMetprintBln@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
LOAD 3    ; Apila el parametro
BPRINT    ; Imprime el entero en el tope de la pila
PRNLN    ; Imprime un salto de linea
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de printBln

lblMetprintCln@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
LOAD 3    ; Apila el parametro
CPRINT    ; Imprime el caracter en el tope de la pila
PRNLN    ; Imprime un salto de linea
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de printCln

lblMetprintIln@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
LOAD 3    ; Apila el parametro
IPRINT    ; Imprime el entero en el tope de la pila
PRNLN    ; Imprime un salto de linea
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de printIln

lblMetprintSln@System:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
LOAD 3    ; Apila el parametro
SPRINT    ; Imprime el string en el tope de la pila
PRNLN    ; Imprime un salto de linea
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de printSln


.DATA
lblVTString: NOP


.CODE
lblConstructor@String:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
FMEM 0 ; Libera espacio de variables locales
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de String


.DATA
lblVTInit: NOP


.CODE
lblMetmain@Init:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
RMEM 1 ; Reserva espacio para la variable local a
RMEM 1 ; Reserva espacio para el CIR generado
PUSH 2 ; Reserva espacio para el CIR
PUSH simple_malloc ;  Carga direccion de rutina para alojar el CIR
CALL ; Llama a la rutina de alojamiento
DUP ; Duplica la referencia al CIR
PUSH lblVTA ; Carga la direccion de la VT
STOREREF 0 ; Guarda la direccion de la VT en el CIR
DUP ; Duplica la referencia al CIR
PUSH lblConstructor@A ; Carga la direccion del constructor
CALL ; Llama al constructor
STORE 0 ; Almacena el valor de la variable local a
LOAD 0 ; Carga el valor de la variable local a
DUP ; Duplica la referencia al CIR
LOADREF 0 ; Cargo la referencia a la VT en el CIR
LOADREF 0 ; Cargo la referencia al metodo en la VT
CALL ; Llama al metodo m2
FMEM 1 ; Libera espacio de variables locales
STOREFP ; Almacena el tope de la pila en el registro 
RET 0 ; Libera el espacio de los parametros de main

lblMetm1@Init:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
PUSH 1234 ; Apila el valor
PUSH lblMetprintIln@System ; Apila el metodo
CALL ; Llama al metodo
FMEM 0 ; Libera espacio de variables locales
STOREFP ; Almacena el tope de la pila en el registro 
RET 0 ; Libera el espacio de los parametros de m1

lblConstructor@Init:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
FMEM 0 ; Libera espacio de variables locales
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de Init


.DATA
lblVTA: DW lblMetm2@A
.CODE
lblConstructor@A:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
FMEM 0 ; Libera espacio de variables locales
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de A

lblMetm2@A:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
RMEM 1 ; Reserva espacio para la variable local a
PUSH 3 ; Apila el valor
STORE 0 ; Almacena el valor de la variable local a
LOAD 3 ; Carga la referencia al CIR 
LOADREF 1 ; Carga el valor del atributo a1
LOAD 0 ; Carga el valor de la variable local a
ADD
DUP ; Duplica el valor de la asignacion a1
LOAD 3 ; Carga la referencia al CIR 
SWAP ; Bajo la referencia del CIR
STOREREF 1 ; Almacena el valor del atributo a1
POP ; Se desapila el valor de la asignacion 
LOAD 3 ; Carga la referencia al CIR 
LOADREF 1 ; Carga el valor del atributo a1
PUSH lblMetdebugPrint@Object ; Apila el metodo
CALL ; Llama al metodo
FMEM 1 ; Libera espacio de variables locales
STOREFP ; Almacena el tope de la pila en el registro 
RET 1 ; Libera el espacio de los parametros de m2

lblMetm3@A:LOADFP ; Apila el valor del registro
LOADSP ; Apila el valor en el registro sp
STOREFP ; Almacena el tope de la pila en el registro
PUSH 1234 ; Apila el valor
PUSH lblMetdebugPrint@Object ; Apila el metodo
CALL ; Llama al metodo
FMEM 0 ; Libera espacio de variables locales
STOREFP ; Almacena el tope de la pila en el registro 
RET 0 ; Libera el espacio de los parametros de m3


